```
'''
  # we introduce the dropout possibility in discriminator(D)
  model = tf.keras.Sequential()
  model.add(keras.layers.Conv2D(8, (1, 1), strides=(1, 1), padding='same',
                        input_shape= D_input_shape))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Conv2D(16, (1, 1), strides=(1, 1), padding='same'))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))
  '''

  '''
  # It is common for larger networks (more layers or more nodes) to more easily overfit the training data, 
  # so in this trial and error, we take dropout off
  model = tf.keras.Sequential()
  model.add(keras.layers.Conv2D(8, (1, 1), strides=(1, 1), padding='same',
                        input_shape= D_input_shape))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Conv2D(16, (1, 1), strides=(1, 1), padding='same'))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))
  

  #model.add(keras.layers.Conv2D(32, (1, 1), strides=(1, 1), padding='same'))
  #model.add(keras.layers.LeakyReLU())
  #model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Flatten())
  model.add(keras.layers.Dense(1))
  '''

  '''
  # apple
  model = tf.keras.Sequential()
  model.add(keras.layers.Conv2D(8, (1, 1), strides=(1, 1), padding='same',
                        input_shape= D_input_shape))
  model.add(keras.layers.LeakyReLU())
  #model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Conv2D(16, (1, 1), strides=(1, 1), padding='same'))
  model.add(keras.layers.LeakyReLU())
  #model.add(keras.layers.Dropout(0.1))
  

  #model.add(keras.layers.Conv2D(32, (1, 1), strides=(1, 1), padding='same'))
  #model.add(keras.layers.LeakyReLU())
  #model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Flatten())
  model.add(keras.layers.Dense(1))
  '''

  '''
  # Banana
  model = tf.keras.Sequential()
  model.add(keras.layers.Conv2D(16, (1, 1), strides=(1, 1), padding='same',
                        input_shape= D_input_shape))
  model.add(keras.layers.LeakyReLU())
  #model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Conv2D(32, (1, 1), strides=(1, 1), padding='same'))
  model.add(keras.layers.LeakyReLU())
  #model.add(keras.layers.Dropout(0.1))
  

  #model.add(keras.layers.Conv2D(32, (1, 1), strides=(1, 1), padding='same'))
  #model.add(keras.layers.LeakyReLU())
  #model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Flatten())
  model.add(keras.layers.Dense(1))
  '''

  '''
  # Cranberry
  model = tf.keras.Sequential()
  model.add(keras.layers.Conv2D(16, (1, 1), strides=(1, 1), padding='same',
                        input_shape= D_input_shape))
  model.add(keras.layers.LeakyReLU())
  #model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Conv2D(32, (1, 1), strides=(1, 1), padding='same'))
  model.add(keras.layers.LeakyReLU())
  #model.add(keras.layers.Dropout(0.1))
  

  #model.add(keras.layers.Conv2D(32, (1, 1), strides=(1, 1), padding='same'))
  #model.add(keras.layers.LeakyReLU())
  #model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Flatten())
  model.add(keras.layers.Dense(1))
  '''

  '''
  # Cranberry alpha 
  model = tf.keras.Sequential()
  model.add(keras.layers.Conv2D(16, (1, 1), strides=(1, 1), padding='same',
                        input_shape= D_input_shape))
  model.add(keras.layers.LeakyReLU())
  #model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Conv2D(32, (1, 1), strides=(1, 1), padding='same'))
  model.add(keras.layers.LeakyReLU())
  #model.add(keras.layers.Dropout(0.1))
  

  #model.add(keras.layers.Conv2D(32, (1, 1), strides=(1, 1), padding='same'))
  #model.add(keras.layers.LeakyReLU())
  #model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Flatten())
  model.add(keras.layers.Dense(1))
  '''

  '''
  # Cranberry beta
  model = tf.keras.Sequential()
  
  model.add(keras.layers.Conv2D(16, (1, 1), strides=(1, 1), padding='same',
                        input_shape= D_input_shape))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Conv2D(32, (1, 1), strides=(1, 1), padding='same'))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Flatten())
  model.add(keras.layers.Dense(1))
  '''

  '''
  # Cranberry coco
  model = tf.keras.Sequential()
  
  model.add(keras.layers.Conv2D(8, (1, 1), strides=(1, 1), padding='same',
                        input_shape= D_input_shape))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Conv2D(16, (1, 1), strides=(1, 1), padding='same'))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Conv2D(32, (1, 1), strides=(1, 1), padding='same'))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Conv2D(64, (1, 1), strides=(1, 1), padding='same'))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Flatten())
  model.add(keras.layers.Dense(1))
  '''

  '''
  # Durian
  model = tf.keras.Sequential()
  
  model.add(keras.layers.Conv2D(5, (1, 1), strides=(1, 1), padding='same',
                        input_shape= D_input_shape))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Conv2D(10, (1, 1), strides=(1, 1), padding='same'))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Conv2D(20, (1, 1), strides=(1, 1), padding='same'))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))

  
  #model.add(keras.layers.Conv2D(40, (1, 1), strides=(1, 1), padding='same'))
  #model.add(keras.layers.LeakyReLU())
  #model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Flatten())
  model.add(keras.layers.Dense(1))
  '''

  '''
  # eleplant
  model = tf.keras.Sequential()
  
  model.add(keras.layers.Conv2D(5, (1, 1), strides=(1, 1), padding='same',
                        input_shape= D_input_shape))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Conv2D(10, (1, 1), strides=(1, 1), padding='same'))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Conv2D(20, (1, 1), strides=(1, 1), padding='same'))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1)) 

  #model.add(keras.layers.Conv2D(30, (1, 1), strides=(1, 1), padding='same'))
  #model.add(keras.layers.LeakyReLU())
  #model.add(keras.layers.Dropout(0.1))

  #model.add(keras.layers.Conv2D(35, (1, 1), strides=(1, 1), padding='same'))
  #model.add(keras.layers.LeakyReLU())
  #model.add(keras.layers.Dropout(0.1))

  #model.add(keras.layers.Conv2D(40, (1, 1), strides=(1, 1), padding='same'))
  #model.add(keras.layers.LeakyReLU())
  #model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Flatten())
  model.add(keras.layers.Dense(1))
  '''

  '''
  # Frambuesa
  model = tf.keras.Sequential()
  
  model.add(keras.layers.Conv2D(5, (1, 1), strides=(1, 1), padding='same',
                        input_shape= D_input_shape))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Conv2D(10, (1, 1), strides=(1, 1), padding='same'))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Conv2D(20, (1, 1), strides=(1, 1), padding='same'))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1)) 

  model.add(keras.layers.Flatten())
  model.add(keras.layers.Dense(1))
  '''

  '''
  # Frambuesa alpha
  model = tf.keras.Sequential()
  
  model.add(keras.layers.Conv2D(5, (1, 1), strides=(1, 1), padding='same',
                        input_shape= D_input_shape))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Conv2D(10, (1, 1), strides=(1, 1), padding='same'))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Conv2D(15, (1, 1), strides=(1, 1), padding='same'))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1)) 

  model.add(keras.layers.Conv2D(20, (1, 1), strides=(1, 1), padding='same'))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1)) 
  
  model.add(keras.layers.Conv2D(20, (1, 1), strides=(1, 1), padding='same'))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1)) 

  model.add(keras.layers.Flatten())
  model.add(keras.layers.Dense(1))
  '''

  '''
  model = tf.keras.Sequential()
  
  model.add(keras.layers.Conv2D(5, (1, 1), strides=(1, 1), padding='same',
                        input_shape= D_input_shape))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Conv2D(10, (1, 1), strides=(1, 1), padding='same'))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Conv2D(15, (1, 1), strides=(1, 1), padding='same'))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1)) 
  
  model.add(keras.layers.Conv2D(20, (1, 1), strides=(1, 1), padding='same'))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1)) 

  model.add(keras.layers.Flatten())
  model.add(keras.layers.Dense(1))
  '''

  '''
  # Irelia, helen melon - - loss 101 batch size 64
  model = tf.keras.Sequential()
  
  model.add(keras.layers.Conv2D(16, (1, 1), strides=(1, 1), padding='same',
                        input_shape= D_input_shape))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Conv2D(32, (3, 3), strides=(1, 1), padding='same'))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Flatten())
  model.add(keras.layers.Dense(1))

  '''

  '''
  model = tf.keras.Sequential()
  
  model.add(keras.layers.Conv2D(16, (1, 1), strides=(1, 1), padding='same',
                        input_shape= D_input_shape))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Conv2D(32, (3, 3), strides=(1, 1), padding='same'))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Conv2D(64, (3, 3), strides=(1, 1), padding='same'))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Flatten())
  model.add(keras.layers.Dense(1))
  '''

  '''
  #jack melon
  model = tf.keras.Sequential()
  
  model.add(keras.layers.Conv2D(32, (3, 3), strides=(1, 1), padding='same',
                        input_shape= D_input_shape))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))

  #model.add(keras.layers.Conv2D(32, (3, 3), strides=(1, 1), padding='same'))
  #model.add(keras.layers.LeakyReLU())
  #model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Conv2D(64, (1, 1), strides=(1, 1), padding='same'))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Flatten())
  model.add(keras.layers.Dense(1))
  '''

  '''
  model = tf.keras.Sequential()
  
  model.add(keras.layers.Conv2D(32, (3, 3), strides=(1, 1), padding='same',
                        input_shape= D_input_shape))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))

  #model.add(keras.layers.Conv2D(32, (3, 3), strides=(1, 1), padding='same'))
  #model.add(keras.layers.LeakyReLU())
  #model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Conv2D(128, (5, 5), strides=(1, 1), padding='same'))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))


  model.add(keras.layers.Flatten())
  model.add(keras.layers.Dense(1))
  '''
  
  '''almost success
  model = tf.keras.Sequential()
  
  model.add(keras.layers.Conv2D(32, (3, 3), strides=(1, 1), padding='same',
                        input_shape= D_input_shape))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Conv2D(64, (3, 3), strides=(1, 1), padding='same'))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Conv2D(128, (2, 2), strides=(1, 1), padding='same'))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))


  model.add(keras.layers.Flatten())
  model.add(keras.layers.Dense(1))
  '''

  ''' 
  model = tf.keras.Sequential()
  
  model.add(keras.layers.Conv2D(32, (3, 3), strides=(1, 1), padding='same',
                        input_shape= D_input_shape))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))

  model.add(keras.layers.Conv2D(64, (3, 3), strides=(1, 1), padding='same'))
  model.add(keras.layers.LeakyReLU())
  model.add(keras.layers.Dropout(0.1))

  #model.add(keras.layers.Conv2D(128, (2, 2), strides=(1, 1), padding='same'))
  #model.add(keras.layers.LeakyReLU())
  #model.add(keras.layers.Dropout(0.1))
  '''

```

